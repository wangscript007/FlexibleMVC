<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
  </configSections>

  <log4net>
    <!-- 将日志记录到文本文件中 -->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      　　　<!--输出文件路径-->
      <file value="D:\\test.txt"/>
      <appendToFile value="true"/>
      <!--最多10个日志备份文件-->
      <maxSizeRollBackups value="10"/>
      <!--每个文件最大1M-->
      <maximumFileSize value="1024KB"/>
      <!--回滚的格式按照大小-->
      <rollingStyle value="Size"/>

      <staticLogFileName value="true"/>

      <layout type="log4net.Layout.PatternLayout">
        <!--输出内容 分别为：%date日期，%thread线程ID，(%-5level)等级，(%logger)初始配置时自定义的名字，%message消息，%newline换行-->
        <!--<conversionPattern value="%date [%thread] %-5level %logger - %message%newline"/>-->
        <!--
          %m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息
          %n(new line)：換行
          %d(datetime):输出当前语句运行的时刻 
          %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数 
          %t(thread id):当前语句所在的线程ID
          %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
          %c(class):当前日志对象的名称
          %L：输出语句所在的行号
          %F：输出语句所在的文件名
          %-数字：表示该项的最小长度，如果不够，则用空格填充
        -->
        <conversionPattern value="%d [%t] %-5p %l : %m%n"/>
      </layout>
    </appender>
    <!-- 将日志利用ADO.NET记录到数据库中 -->
    <appender name="AdoNetAppender_SQLServer" type="log4net.Appender.AdoNetAppender">
      <!-- 缓冲区大小 -->
      <bufferSize value="1" />
      <!-- 引用信息 -->
      <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>
      <!-- 连接到SQL Server的数据库连接字符串 -->
      <connectionString value="Data Source=(local); Initial Catalog=Management; User ID=sa; Password=123456;" />
      <!-- 插入Log表的SQL语句 -->
      <commandText value="INSERT INTO dbo.Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />

      <parameter>
        <parameterName value="@log_date" />
        <dbType value="DateTime" />
        <layout type="log4net.Layout.RawTimeStampLayout" />

      </parameter>

      <parameter>
        <parameterName value="@thread" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%thread" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@log_level" />
        <dbType value="String" />
        <size value="50" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%level" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@logger" />
        <dbType value="String" />
        <size value="255" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%logger" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@message" />
        <dbType value="String" />
        <size value="4000" />
        <layout type="log4net.Layout.PatternLayout">
          <conversionPattern value="%message" />

        </layout>

      </parameter>

      <parameter>
        <parameterName value="@exception" />
        <dbType value="String" />
        <size value="2000" />
        <layout type="log4net.Layout.ExceptionLayout" />

      </parameter>

    </appender>

    <root>
      <!-- 控制级别，由低到高：ALL|DEBUG|INFO|WARN|ERROR|FATAL|OFF -->
      <!-- 比如定义级别为INFO，则INFO级别向下的级别，比如DEBUG日志将不会被记录 -->
      <!-- 如果没有定义LEVEL的值，则缺省为DEBUG -->
      <level value="ALL" />
      <!-- 将日志利用ADO.NET记录到数据库中 -->
      <appender-ref ref="RollingLogFileAppender" />

    </root>

  </log4net>

</configuration>